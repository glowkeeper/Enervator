/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IERC1820RegistryInterface extends Interface {
  functions: {
    setManager: TypedFunctionDescription<{
      encode([account, newManager]: [string, string]): string;
    }>;

    setInterfaceImplementer: TypedFunctionDescription<{
      encode([account, interfaceHash, implementer]: [
        string,
        Arrayish,
        string
      ]): string;
    }>;

    updateERC165Cache: TypedFunctionDescription<{
      encode([account, interfaceId]: [string, Arrayish]): string;
    }>;
  };

  events: {
    InterfaceImplementerSet: TypedEventDescription<{
      encodeTopics([account, interfaceHash, implementer]: [
        string | null,
        Arrayish | null,
        string | null
      ]): string[];
    }>;

    ManagerChanged: TypedEventDescription<{
      encodeTopics([account, newManager]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class IERC1820Registry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IERC1820Registry;
  attach(addressOrName: string): IERC1820Registry;
  deployed(): Promise<IERC1820Registry>;

  on(event: EventFilter | string, listener: Listener): IERC1820Registry;
  once(event: EventFilter | string, listener: Listener): IERC1820Registry;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IERC1820Registry;
  removeAllListeners(eventName: EventFilter | string): IERC1820Registry;
  removeListener(eventName: any, listener: Listener): IERC1820Registry;

  interface: IERC1820RegistryInterface;

  functions: {
    getManager(account: string): Promise<string>;

    getInterfaceImplementer(
      account: string,
      interfaceHash: Arrayish
    ): Promise<string>;

    interfaceHash(interfaceName: string): Promise<string>;

    implementsERC165Interface(
      account: string,
      interfaceId: Arrayish
    ): Promise<boolean>;

    implementsERC165InterfaceNoCache(
      account: string,
      interfaceId: Arrayish
    ): Promise<boolean>;

    setManager(
      account: string,
      newManager: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setInterfaceImplementer(
      account: string,
      interfaceHash: Arrayish,
      implementer: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateERC165Cache(
      account: string,
      interfaceId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  filters: {
    InterfaceImplementerSet(
      account: string | null,
      interfaceHash: Arrayish | null,
      implementer: string | null
    ): EventFilter;

    ManagerChanged(
      account: string | null,
      newManager: string | null
    ): EventFilter;
  };

  estimate: {
    setManager(account: string, newManager: string): Promise<BigNumber>;

    setInterfaceImplementer(
      account: string,
      interfaceHash: Arrayish,
      implementer: string
    ): Promise<BigNumber>;

    updateERC165Cache(
      account: string,
      interfaceId: Arrayish
    ): Promise<BigNumber>;
  };
}
