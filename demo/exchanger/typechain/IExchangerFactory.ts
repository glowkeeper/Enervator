/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, Signer } from "ethers";
import { Provider } from "ethers/providers";

import { IExchanger } from "./IExchanger";

export class IExchangerFactory {
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IExchanger {
    return new Contract(address, _abi, signerOrProvider) as IExchanger;
  }
}

const _abi = [
  {
    constant: false,
    inputs: [
      {
        name: "_depositDB",
        type: "address"
      },
      {
        name: "_forexDB",
        type: "address"
      }
    ],
    name: "setComponents",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        name: "_depositor",
        type: "address"
      },
      {
        name: "_depositRef",
        type: "bytes32"
      },
      {
        name: "_code",
        type: "bytes32"
      },
      {
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "deposit",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        name: "_depositRef",
        type: "bytes32"
      }
    ],
    name: "setCanWithdraw",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        name: "_code",
        type: "bytes32"
      },
      {
        name: "_rate",
        type: "int128"
      }
    ],
    name: "setRate",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        name: "_buyer",
        type: "address"
      },
      {
        name: "_buyRef",
        type: "bytes32"
      },
      {
        name: "_depositRef",
        type: "bytes32"
      },
      {
        name: "_amountFIAT",
        type: "int128"
      }
    ],
    name: "buy",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        name: "_buyer",
        type: "address"
      },
      {
        name: "_amountEOR",
        type: "uint256"
      },
      {
        name: "_buyData",
        type: "bytes"
      }
    ],
    name: "bought",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }
];
