/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IDepositInterface extends Interface {
  functions: {
    deposit: TypedFunctionDescription<{
      encode([_depositor, _depositRef, _code, _amount]: [
        string,
        Arrayish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    withdraw: TypedFunctionDescription<{
      encode([_depositor, _depositRef, _code, _amount]: [
        string,
        Arrayish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    setCanWithdraw: TypedFunctionDescription<{
      encode([_depositRef, _canWithdraw]: [Arrayish, boolean]): string;
    }>;
  };

  events: {};
}

export class IDeposit extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IDeposit;
  attach(addressOrName: string): IDeposit;
  deployed(): Promise<IDeposit>;

  on(event: EventFilter | string, listener: Listener): IDeposit;
  once(event: EventFilter | string, listener: Listener): IDeposit;
  addListener(eventName: EventFilter | string, listener: Listener): IDeposit;
  removeAllListeners(eventName: EventFilter | string): IDeposit;
  removeListener(eventName: any, listener: Listener): IDeposit;

  interface: IDepositInterface;

  functions: {
    getExists(_x: string): Promise<boolean>;

    getDepositor(_index: BigNumberish): Promise<string>;

    getNumDeposits(_depositor: string): Promise<BigNumber>;

    getDepositReference(
      _depositor: string,
      _index: BigNumberish
    ): Promise<string>;

    getDepositedAddress(_depositRef: Arrayish): Promise<string>;

    getDepositedAmount(_depositRef: Arrayish): Promise<BigNumber>;

    getDepositedCode(_depositRef: Arrayish): Promise<string>;

    getCanWithdraw(_depositRef: Arrayish): Promise<boolean>;

    getDeposit(
      _depositRef: Arrayish
    ): Promise<{
      amount: BigNumber;
      code: string;
      account: string;
      canWithdraw: boolean;
    }>;

    deposit(
      _depositor: string,
      _depositRef: Arrayish,
      _code: Arrayish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdraw(
      _depositor: string,
      _depositRef: Arrayish,
      _code: Arrayish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setCanWithdraw(
      _depositRef: Arrayish,
      _canWithdraw: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getNumDepositors(): Promise<BigNumber>;
  };

  filters: {};

  estimate: {
    deposit(
      _depositor: string,
      _depositRef: Arrayish,
      _code: Arrayish,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    withdraw(
      _depositor: string,
      _depositRef: Arrayish,
      _code: Arrayish,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    setCanWithdraw(
      _depositRef: Arrayish,
      _canWithdraw: boolean
    ): Promise<BigNumber>;
  };
}
