/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IEnervatorManagerInterface extends Interface {
  functions: {
    addTokens: TypedFunctionDescription<{
      encode([_amount]: [BigNumberish]): string;
    }>;

    burnTokens: TypedFunctionDescription<{
      encode([_amount]: [BigNumberish]): string;
    }>;

    setToken: TypedFunctionDescription<{ encode([_token]: [string]): string }>;

    setTPES: TypedFunctionDescription<{
      encode([_amount]: [BigNumberish]): string;
    }>;

    setPerCapitaEnergy: TypedFunctionDescription<{
      encode([_amount]: [BigNumberish]): string;
    }>;

    send: TypedFunctionDescription<{
      encode([_recipient, _amount, _buyData]: [
        string,
        BigNumberish,
        Arrayish
      ]): string;
    }>;
  };

  events: {
    TokensReceived: TypedEventDescription<{
      encodeTopics([
        operator,
        from,
        to,
        amount,
        data,
        operatorData,
        token,
        fromBalance,
        toBalance
      ]: [null, null, null, null, null, null, null, null, null]): string[];
    }>;

    TokensSent: TypedEventDescription<{
      encodeTopics([
        operator,
        from,
        to,
        amount,
        data,
        operatorData,
        token,
        fromBalance,
        toBalance
      ]: [null, null, null, null, null, null, null, null, null]): string[];
    }>;
  };
}

export class IEnervatorManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IEnervatorManager;
  attach(addressOrName: string): IEnervatorManager;
  deployed(): Promise<IEnervatorManager>;

  on(event: EventFilter | string, listener: Listener): IEnervatorManager;
  once(event: EventFilter | string, listener: Listener): IEnervatorManager;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IEnervatorManager;
  removeAllListeners(eventName: EventFilter | string): IEnervatorManager;
  removeListener(eventName: any, listener: Listener): IEnervatorManager;

  interface: IEnervatorManagerInterface;

  functions: {
    addTokens(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    burnTokens(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setToken(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setTPES(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setPerCapitaEnergy(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    send(
      _recipient: string,
      _amount: BigNumberish,
      _buyData: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getTokenName(): Promise<string>;
    getTokenSymbol(): Promise<string>;
    getTotalSupply(): Promise<BigNumber>;
    getPricePerMWh(): Promise<BigNumber>;
    getCurrentTPES(): Promise<BigNumber>;
    getOldTPES(): Promise<BigNumber>;
    getPerCapitaEnergy(): Promise<BigNumber>;
    getUnitValue(): Promise<BigNumber>;
  };

  filters: {
    TokensReceived(
      operator: null,
      from: null,
      to: null,
      amount: null,
      data: null,
      operatorData: null,
      token: null,
      fromBalance: null,
      toBalance: null
    ): EventFilter;

    TokensSent(
      operator: null,
      from: null,
      to: null,
      amount: null,
      data: null,
      operatorData: null,
      token: null,
      fromBalance: null,
      toBalance: null
    ): EventFilter;
  };

  estimate: {
    addTokens(_amount: BigNumberish): Promise<BigNumber>;

    burnTokens(_amount: BigNumberish): Promise<BigNumber>;

    setToken(_token: string): Promise<BigNumber>;

    setTPES(_amount: BigNumberish): Promise<BigNumber>;

    setPerCapitaEnergy(_amount: BigNumberish): Promise<BigNumber>;

    send(
      _recipient: string,
      _amount: BigNumberish,
      _buyData: Arrayish
    ): Promise<BigNumber>;
  };
}
