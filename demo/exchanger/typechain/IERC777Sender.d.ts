/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IERC777SenderInterface extends Interface {
  functions: {
    tokensToSend: TypedFunctionDescription<{
      encode([operator, from, to, amount, userData, operatorData]: [
        string,
        string,
        string,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;
  };

  events: {};
}

export class IERC777Sender extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IERC777Sender;
  attach(addressOrName: string): IERC777Sender;
  deployed(): Promise<IERC777Sender>;

  on(event: EventFilter | string, listener: Listener): IERC777Sender;
  once(event: EventFilter | string, listener: Listener): IERC777Sender;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IERC777Sender;
  removeAllListeners(eventName: EventFilter | string): IERC777Sender;
  removeListener(eventName: any, listener: Listener): IERC777Sender;

  interface: IERC777SenderInterface;

  functions: {
    tokensToSend(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: Arrayish,
      operatorData: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  filters: {};

  estimate: {
    tokensToSend(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: Arrayish,
      operatorData: Arrayish
    ): Promise<BigNumber>;
  };
}
