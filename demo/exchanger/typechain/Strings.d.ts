/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface StringsInterface extends Interface {
  functions: {};

  events: {};
}

export class Strings extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Strings;
  attach(addressOrName: string): Strings;
  deployed(): Promise<Strings>;

  on(event: EventFilter | string, listener: Listener): Strings;
  once(event: EventFilter | string, listener: Listener): Strings;
  addListener(eventName: EventFilter | string, listener: Listener): Strings;
  removeAllListeners(eventName: EventFilter | string): Strings;
  removeListener(eventName: any, listener: Listener): Strings;

  interface: StringsInterface;

  functions: {
    compare(_a: Arrayish, _b: Arrayish): Promise<boolean>;

    bytes32ToStr(_x: Arrayish): Promise<string>;

    getIndex(_a: string, _xs: (string)[]): Promise<BigNumber>;

    getExists(_x: Arrayish, _xs: (Arrayish)[]): Promise<boolean>;
  };

  filters: {};

  estimate: {};
}
