/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IExchangerInterface extends Interface {
  functions: {
    setComponents: TypedFunctionDescription<{
      encode([_enervatorManager, _depositDB, _forexDB, _buyDB]: [
        string,
        string,
        string,
        string
      ]): string;
    }>;

    setCanWithdraw: TypedFunctionDescription<{
      encode([_depositRef, _canWithdraw]: [Arrayish, boolean]): string;
    }>;

    setRate: TypedFunctionDescription<{
      encode([_code, _rate]: [Arrayish, BigNumberish]): string;
    }>;

    deposit: TypedFunctionDescription<{
      encode([_depositor, _depositRef, _code, _amount]: [
        string,
        Arrayish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    buy: TypedFunctionDescription<{
      encode([_buyData]: [
        {
          amountWEI: BigNumberish;
          buyer: string;
          buyRef: Arrayish;
          depositRef: Arrayish;
        }
      ]): string;
    }>;

    bought: TypedFunctionDescription<{
      encode([_buyer, _amountWEI, _buyData]: [
        string,
        BigNumberish,
        Arrayish
      ]): string;
    }>;
  };

  events: {};
}

export class IExchanger extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IExchanger;
  attach(addressOrName: string): IExchanger;
  deployed(): Promise<IExchanger>;

  on(event: EventFilter | string, listener: Listener): IExchanger;
  once(event: EventFilter | string, listener: Listener): IExchanger;
  addListener(eventName: EventFilter | string, listener: Listener): IExchanger;
  removeAllListeners(eventName: EventFilter | string): IExchanger;
  removeListener(eventName: any, listener: Listener): IExchanger;

  interface: IExchangerInterface;

  functions: {
    setComponents(
      _enervatorManager: string,
      _depositDB: string,
      _forexDB: string,
      _buyDB: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setCanWithdraw(
      _depositRef: Arrayish,
      _canWithdraw: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setRate(
      _code: Arrayish,
      _rate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deposit(
      _depositor: string,
      _depositRef: Arrayish,
      _code: Arrayish,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    buy(
      _buyData: {
        amountWEI: BigNumberish;
        buyer: string;
        buyRef: Arrayish;
        depositRef: Arrayish;
      },
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    bought(
      _buyer: string,
      _amountWEI: BigNumberish,
      _buyData: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  filters: {};

  estimate: {
    setComponents(
      _enervatorManager: string,
      _depositDB: string,
      _forexDB: string,
      _buyDB: string
    ): Promise<BigNumber>;

    setCanWithdraw(
      _depositRef: Arrayish,
      _canWithdraw: boolean
    ): Promise<BigNumber>;

    setRate(_code: Arrayish, _rate: BigNumberish): Promise<BigNumber>;

    deposit(
      _depositor: string,
      _depositRef: Arrayish,
      _code: Arrayish,
      _amount: BigNumberish
    ): Promise<BigNumber>;

    buy(_buyData: {
      amountWEI: BigNumberish;
      buyer: string;
      buyRef: Arrayish;
      depositRef: Arrayish;
    }): Promise<BigNumber>;

    bought(
      _buyer: string,
      _amountWEI: BigNumberish,
      _buyData: Arrayish
    ): Promise<BigNumber>;
  };
}
