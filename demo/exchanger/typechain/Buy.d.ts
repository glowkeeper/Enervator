/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface BuyInterface extends Interface {
  functions: {
    bought: TypedFunctionDescription<{
      encode([_buyer, _buyRef, _depositRef, _amountEOR]: [
        string,
        Arrayish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {
    Bought: TypedEventDescription<{
      encodeTopics([_epochTime, _buyer, _buyRef, _depositRef, _amountEOR]: [
        null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;
  };
}

export class Buy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Buy;
  attach(addressOrName: string): Buy;
  deployed(): Promise<Buy>;

  on(event: EventFilter | string, listener: Listener): Buy;
  once(event: EventFilter | string, listener: Listener): Buy;
  addListener(eventName: EventFilter | string, listener: Listener): Buy;
  removeAllListeners(eventName: EventFilter | string): Buy;
  removeListener(eventName: any, listener: Listener): Buy;

  interface: BuyInterface;

  functions: {
    getExists(_x: string): Promise<boolean>;

    getBuys(_index: BigNumberish): Promise<string>;

    getNumBuys(_buyer: string): Promise<BigNumber>;

    getBuyReference(_buyer: string, _index: BigNumberish): Promise<string>;

    getBuyAmount(_buyerRef: Arrayish): Promise<BigNumber>;

    getBuyAddress(_buyerRef: Arrayish): Promise<string>;

    getDepositReference(_buyerRef: Arrayish): Promise<string>;

    bought(
      _buyer: string,
      _buyRef: Arrayish,
      _depositRef: Arrayish,
      _amountEOR: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getNumBuyers(): Promise<BigNumber>;
  };

  filters: {
    Bought(
      _epochTime: null,
      _buyer: null,
      _buyRef: null,
      _depositRef: null,
      _amountEOR: null
    ): EventFilter;
  };

  estimate: {
    bought(
      _buyer: string,
      _buyRef: Arrayish,
      _depositRef: Arrayish,
      _amountEOR: BigNumberish
    ): Promise<BigNumber>;
  };
}
